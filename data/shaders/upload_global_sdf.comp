#version 450
#extension GL_ARB_separate_shader_objects : enable

#define GLOBAL_SDF_BRICK_SIZE 32
#define GLOBAL_SDF_MAX_OBJECT_COUNT 64

layout(local_size_x = 8, local_size_y = 8, local_size_z = 8) in;

layout(binding = 0, r16f) uniform image3D global_sdf_texture;
layout(binding = 1) uniform texture3D object_textures[GLOBAL_SDF_MAX_OBJECT_COUNT];
layout(binding = 2) uniform sampler sdf_sampler;

struct ObjectData
{
    mat4 world_to_volume;
    mat4 volume_to_world;
    vec3 volume_to_uvw_mul;
    float pad0;
    vec3 volume_to_uvw_add;
    float pad1;
    vec3 volume_bounds_extent;
    float pad2;
};

layout(std140, binding = 3) buffer ObjectsBuffer
{
    ObjectData object_datas[];
};

layout(std140, binding = 4) buffer UploadParams
{
    ivec3 brick_coord;
    float max_distance;
    vec3 coord_to_pos_mul;
    float pad0;
    vec3 coord_to_pos_add;
    uint object_count;
    ivec4 objects[GLOBAL_SDF_MAX_OBJECT_COUNT / 4];// object index
};

float combine_distance_to_sdf(float sdf, float distance)
{
    if (sdf <= 0.0 && distance <= 0.0) return sdf;

    return sqrt(pow(max(sdf, 0), 2) + pow(distance, 2));
}

float distance_to_object_sdf(float min_distance, ObjectData data, texture3D sdf_texture, vec3 world_pos)
{
    vec3 volume_to_world_scale = vec3(length(data.volume_to_world[0]), length(data.volume_to_world[1]), length(data.volume_to_world[2]));
    float volume_scale = min(volume_to_world_scale.x, min(volume_to_world_scale.y, volume_to_world_scale.z));

    vec3 volume_pos = (data.world_to_volume * vec4(world_pos, 1.0)).xyz;
    vec3 volume_uv = volume_pos * data.volume_to_uvw_mul + data.volume_to_uvw_add;
    if(volume_uv.x < 0 || volume_uv.x > 1 || volume_uv.y < 0 || volume_uv.y > 1 || volume_uv.z < 0 || volume_uv.z > 1){
        //find a way to get a valid uv
        volume_uv = clamp(volume_uv, 0, 1);
    }else{
        // return 0;
        return textureLod(sampler3D(sdf_texture, sdf_sampler), volume_uv, 0.0).r * volume_scale;
    }
    vec3 volume_pos_clamped = (volume_uv - data.volume_to_uvw_add) / data.volume_to_uvw_mul;
    vec3 world_pos_clamped = (data.volume_to_world * vec4(volume_pos_clamped, 1.0)).xyz;
    float distance_to_volume = distance(world_pos, world_pos_clamped);
    // return distance_to_volume;
    // if(min_distance <= distance_to_volume) return distance_to_volume;

    float sdf_distance = textureLod(sampler3D(sdf_texture, sdf_sampler), volume_uv, 0.0).r;
    sdf_distance *= volume_scale;

    float result = combine_distance_to_sdf(sdf_distance, distance_to_volume);
    if(distance_to_volume > 0){
        result = max(distance_to_volume, result);
    }
    return result;
    // return distance_to_volume;
}

void main()
{
    // 对每个voxel
    ivec3 voxel_coord = brick_coord * ivec3(GLOBAL_SDF_BRICK_SIZE) + ivec3(gl_GlobalInvocationID);
    vec3 voxel_world_pos = voxel_coord * coord_to_pos_mul + coord_to_pos_add;
    float min_distance = max_distance;
    // 对每个mesh
    for (uint i = 0; i < object_count; i++)
    {
        uint object_idx = objects[i / 4][i % 4];
        ObjectData object_data = object_datas[object_idx];
        float object_distance = distance_to_object_sdf(min_distance, object_data, object_textures[object_idx], voxel_world_pos);
        min_distance = min(min_distance, object_distance);
    }
    // float distance = clamp(min_distance / max_distance, -1.0, 1.0);
    imageStore(global_sdf_texture, voxel_coord, vec4(min_distance));
}